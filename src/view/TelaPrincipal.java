/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.text.MaskFormatter;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.apache.pdfbox.tools.imageio.ImageIOUtil;

/**
 *
 * @author Christian
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    private String localOrigem;
    private String localDestino;
    private String extensaoImagem = ".png";
    private float resolucaoImagem = 600;

    public String getLocalOrigem() {
        return localOrigem;
    }

    public void setLocalOrigem(String localOrigem) {
        this.localOrigem = localOrigem;
    }

    public String getLocalDestino() {
        return localDestino;
    }

    public void setLocalDestino(String localDestino) {
        this.localDestino = localDestino;
    }

    public TelaPrincipal() {

        //if (podeConectar()) {
//        Fundo fundoLogin = new Fundo();
//        this.setIconImage(fundoLogin.carregaIconeAplicacao(true));

        initComponents();
        // this.setTitle(getTitle() + " - Expira dia: " + DATAEXPIRACAO + " - Versão de Testes");

        /*try {
            CarregaSystemTray();
        } catch (Exception e) {
            System.err.println("Erro no método: CarregaSystemTray(). " + e.getMessage());
        }*/
        try {
            KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
            Action escapeAction = new AbstractAction() {
                public void actionPerformed(ActionEvent e) {
                    dispose();
                }
            };
            getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
            getRootPane().getActionMap().put("ESCAPE", escapeAction);
        } catch (Exception e) {
            System.out.println("Não foi possível utilizar o recurso de fechar o JInternalFrame com o ESC.");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupExtensao = new javax.swing.ButtonGroup();
        buttonGroupResolucao = new javax.swing.ButtonGroup();
        botaoSelecionarPastaXML = new javax.swing.JButton();
        textoLocalPDF = new javax.swing.JTextField();
        botaoSelecionarPastaDestino = new javax.swing.JButton();
        textoDestinoImagem = new javax.swing.JTextField();
        botaoAnalisarAgora = new javax.swing.JButton();
        barraProgresso = new javax.swing.JProgressBar();
        botaoAbrirPasta = new javax.swing.JButton();
        radioJPG = new javax.swing.JRadioButton();
        radioPNG = new javax.swing.JRadioButton();
        radioBMP = new javax.swing.JRadioButton();
        radioGIF = new javax.swing.JRadioButton();
        radio1200 = new javax.swing.JRadioButton();
        radio900 = new javax.swing.JRadioButton();
        radio600 = new javax.swing.JRadioButton();
        radio300 = new javax.swing.JRadioButton();
        barraMenu = new javax.swing.JMenuBar();
        itensSair = new javax.swing.JMenu();
        jMenuSair = new javax.swing.JMenuItem();
        itensSobre = new javax.swing.JMenu();
        jMenuSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conversor de PDF para Imagens");

        botaoSelecionarPastaXML.setText("Selecionar PDF");
        botaoSelecionarPastaXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarPastaXMLActionPerformed(evt);
            }
        });

        textoLocalPDF.setEditable(false);

        botaoSelecionarPastaDestino.setText("Selecionar Destino da Imagem");
        botaoSelecionarPastaDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoSelecionarPastaDestinoActionPerformed(evt);
            }
        });

        textoDestinoImagem.setEditable(false);

        botaoAnalisarAgora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ic_send_black_24dp.png"))); // NOI18N
        botaoAnalisarAgora.setText("Converter");
        botaoAnalisarAgora.setToolTipText("");
        botaoAnalisarAgora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAnalisarAgoraActionPerformed(evt);
            }
        });

        barraProgresso.setStringPainted(true);

        botaoAbrirPasta.setText("Abrir Pasta Destino");
        botaoAbrirPasta.setToolTipText("Abrir Pasta XML");
        botaoAbrirPasta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoAbrirPasta.setPreferredSize(new java.awt.Dimension(48, 48));
        botaoAbrirPasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAbrirPastaActionPerformed(evt);
            }
        });

        buttonGroupExtensao.add(radioJPG);
        radioJPG.setText("JPG");

        buttonGroupExtensao.add(radioPNG);
        radioPNG.setSelected(true);
        radioPNG.setText("PNG");

        buttonGroupExtensao.add(radioBMP);
        radioBMP.setText("BMP");

        buttonGroupExtensao.add(radioGIF);
        radioGIF.setText("GIF");

        buttonGroupResolucao.add(radio1200);
        radio1200.setText("1200dpi");

        buttonGroupResolucao.add(radio900);
        radio900.setText("900dpi");

        buttonGroupResolucao.add(radio600);
        radio600.setSelected(true);
        radio600.setText("600dpi");

        buttonGroupResolucao.add(radio300);
        radio300.setText("300dpi");

        itensSair.setText("Arquivo");

        jMenuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ic_power_settings_new_black_24dp_1x.png"))); // NOI18N
        jMenuSair.setText("Sair");
        jMenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSairActionPerformed(evt);
            }
        });
        itensSair.add(jMenuSair);

        barraMenu.add(itensSair);

        itensSobre.setText("Ajuda");

        jMenuSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/ic_perm_contact_calendar_black_24dp_1x.png"))); // NOI18N
        jMenuSobre.setText("Sobre");
        jMenuSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSobreActionPerformed(evt);
            }
        });
        itensSobre.add(jMenuSobre);

        barraMenu.add(itensSobre);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botaoSelecionarPastaDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoSelecionarPastaXML, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoLocalPDF)
                            .addComponent(textoDestinoImagem)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(radio300)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radio600)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(radio900)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radio1200)
                                .addGap(97, 97, 97))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(radioPNG)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioJPG)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioGIF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioBMP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botaoAbrirPasta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoAnalisarAgora, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoLocalPDF, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoSelecionarPastaXML, javax.swing.GroupLayout.Alignment.CENTER))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoDestinoImagem, javax.swing.GroupLayout.Alignment.CENTER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoSelecionarPastaDestino, javax.swing.GroupLayout.Alignment.CENTER))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(botaoAnalisarAgora)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botaoAbrirPasta, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(radio900)
                            .addComponent(radio600)
                            .addComponent(radio300)
                            .addComponent(radio1200))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(radioBMP)
                            .addComponent(radioGIF)
                            .addComponent(radioJPG)
                            .addComponent(radioPNG))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoSelecionarPastaXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarPastaXMLActionPerformed

        String nomeUsuarioSistema = System.getProperty("user.name");

        JFileChooser abrir = new JFileChooser();
        File novoDiretorio = new File("C:/Users/" + nomeUsuarioSistema + "/Desktop/");
        if (novoDiretorio.exists()) {
            abrir.setCurrentDirectory(novoDiretorio);
        } else {
            novoDiretorio = new File("E:/Desktop/");
            abrir.setCurrentDirectory(novoDiretorio);
        }
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int verificacao = abrir.showOpenDialog(this);
        if (verificacao
                == JFileChooser.APPROVE_OPTION) {

            setLocalOrigem(abrir.getSelectedFile().toString());
            textoLocalPDF.setText(getLocalOrigem());

        }


    }//GEN-LAST:event_botaoSelecionarPastaXMLActionPerformed

    private void botaoSelecionarPastaDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoSelecionarPastaDestinoActionPerformed

        String nomeUsuarioSistema = System.getProperty("user.name");
        JFileChooser abrir = new JFileChooser();
        File novoDiretorio = new File("C:/Users/" + nomeUsuarioSistema + "/Desktop/");
        if (novoDiretorio.exists()) {
            abrir.setCurrentDirectory(novoDiretorio);
        } else {
            novoDiretorio = new File("E:/Desktop/");
            abrir.setCurrentDirectory(novoDiretorio);
        }

        abrir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int verificacao = abrir.showOpenDialog(this);
        if (verificacao
                == JFileChooser.APPROVE_OPTION) {

            setLocalDestino(abrir.getSelectedFile().toString()+ "\\");
            textoDestinoImagem.setText(getLocalDestino());

        }

    }//GEN-LAST:event_botaoSelecionarPastaDestinoActionPerformed

    private void botaoAnalisarAgoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAnalisarAgoraActionPerformed
        // Seleção da extensão da imagem
        if (radioJPG.isSelected()) {
            extensaoImagem = ".jpg";
        }
        if (radioGIF.isSelected()) {
            extensaoImagem = ".gif";
        }
        if (radioBMP.isSelected()) {
            extensaoImagem = ".bmp";
        }

        //Seleção da resolução da imagem
        if (radio300.isSelected()) {
            resolucaoImagem = 300;
        }
        if (radio900.isSelected()) {
            resolucaoImagem = 900;
        }
        if (radio1200.isSelected()) {
            resolucaoImagem = 1200;
        }
        Thread processar = new Thread() {
            @Override
            public void run() {
                try {

                    String pdf = getLocalOrigem();
                    PDDocument document = PDDocument.load(new File(pdf));
                    PDFRenderer pdfRenderer = new PDFRenderer(document);
                    System.out.println("Numero de paginas: " + document.getNumberOfPages());
                    comecarBarraProgresso("Processando ", document.getNumberOfPages());
                    for (int page = 0; page < document.getNumberOfPages(); ++page) {
                        BufferedImage bim = pdfRenderer.renderImageWithDPI(page, resolucaoImagem, ImageType.RGB);

                        // suffix in filename will be used as the file format
                        setValorBarraProgresso();
                        String pdfName = pdf.substring(pdf.lastIndexOf("\\") + 1, pdf.length() - 4);
                        String nomeSalvar = getLocalDestino() + pdfName + "-" + (page + 1) + extensaoImagem;
                        File arquivoExiste = new File(nomeSalvar);

                        if (!arquivoExiste.exists()) {
                            int dpi = (int) resolucaoImagem;
                            ImageIOUtil.writeImage(bim, nomeSalvar, dpi);
                        }else{
                            System.out.println("No existe");
                        }
                        //JPG jpg bmp BMP gif GIF WBMP png PNG wbmp jpeg JPEG

                    }
                    document.close();
                    terminarBarraProgresso();

                } catch (IOException ex) {
                    Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };
        processar.start();

    }//GEN-LAST:event_botaoAnalisarAgoraActionPerformed

    private void botaoAbrirPastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAbrirPastaActionPerformed
        try {
            Runtime.getRuntime().exec("explorer " + getLocalDestino());
        } catch (IOException ex) {
            Logger.getLogger(ex.getMessage());
        }
    }//GEN-LAST:event_botaoAbrirPastaActionPerformed

    private void jMenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSairActionPerformed
        int avaliador = JOptionPane.showOptionDialog(this, "Você realmente deseja sair?", "Sair do Software", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (avaliador == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenuSairActionPerformed

    private void jMenuSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSobreActionPerformed
        JOptionPane.showMessageDialog(this, "Autor: Christian Silva\nE-mail: christian.silva@lealsantos.com", "Autor do Software", WIDTH);
    }//GEN-LAST:event_jMenuSobreActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton botaoAbrirPasta;
    private javax.swing.JButton botaoAnalisarAgora;
    private javax.swing.JButton botaoSelecionarPastaDestino;
    private javax.swing.JButton botaoSelecionarPastaXML;
    private javax.swing.ButtonGroup buttonGroupExtensao;
    private javax.swing.ButtonGroup buttonGroupResolucao;
    private javax.swing.JMenu itensSair;
    private javax.swing.JMenu itensSobre;
    private javax.swing.JMenuItem jMenuSair;
    private javax.swing.JMenuItem jMenuSobre;
    private javax.swing.JRadioButton radio1200;
    private javax.swing.JRadioButton radio300;
    private javax.swing.JRadioButton radio600;
    private javax.swing.JRadioButton radio900;
    private javax.swing.JRadioButton radioBMP;
    private javax.swing.JRadioButton radioGIF;
    private javax.swing.JRadioButton radioJPG;
    private javax.swing.JRadioButton radioPNG;
    private javax.swing.JTextField textoDestinoImagem;
    private javax.swing.JTextField textoLocalPDF;
    // End of variables declaration//GEN-END:variables

    private void comecarBarraProgresso(String texto, int maximo) {
        barraProgresso.setValue(0);
        barraProgresso.setString(texto);
        //barraProgresso.setIndeterminate(true);
        barraProgresso.setMaximum(maximo);

    }

    private void setValorBarraProgresso() {
        int value = barraProgresso.getValue();
        barraProgresso.setValue(value + 1);
    }

    private void terminarBarraProgresso() {
        //barraProgresso.setIndeterminate(false);
        barraProgresso.setString("Conversão Terminada");
    }

    /* public void listarXMLsDiretorio(File directory) {
        if (directory.isDirectory()) {
            String[] subDirectory = directory.list();
            if (subDirectory != null) {
                for (String dir : subDirectory) {
                    String nome = directory + File.separator + dir;
                    if (nome.endsWith(".xml")) {
                        File file = new File(nome);
                        todosXMLsEncontrados.add(file.toPath());
                    }
                    listarXMLsDiretorio(new File(directory + File.separator + dir));
                }
            }
        }
    }*/
    public static String formatString(String value, String pattern) {
        MaskFormatter mf;
        try {
            mf = new MaskFormatter(pattern);
            mf.setValueContainsLiteralCharacters(false);
            return mf.valueToString(value);
        } catch (ParseException ex) {
            System.out.println("Erro na formatação da String ");
            return value;
        }
    }

    private void CarregaSystemTray() {
        if (SystemTray.isSupported()) {
            try {
                final SystemTray tray = SystemTray.getSystemTray();
                Image icon = ImageIO.read(getClass().getResourceAsStream("/icones/final.png"));

                final TrayIcon trayIcon = new TrayIcon(icon);
                trayIcon.setImageAutoSize(true);

                this.addWindowStateListener(new WindowAdapter() {

                    @Override
                    public void windowStateChanged(WindowEvent e) {
                        //checa se a janela foi minimizada
                        if ((e.getNewState() == JFrame.ICONIFIED) || e.getNewState() == 7) {
                            //listener para que a janela se abra com
                            //o clique do mouse

                            trayIcon.addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    setVisible(true);
                                    setExtendedState(JFrame.NORMAL);
                                    toFront();
                                    //remove o icone da bandeira
                                    //quando a janela for reaberta
                                    tray.remove(trayIcon);
                                }

                                public void MousePressed(java.awt.event.MouseEvent evt) {
                                    System.out.println("Mouse Press");
                                }

                            });
                            try {
                                tray.add(trayIcon);
                                trayIcon.displayMessage("Aviso!", "Monitoramento de notas em execução...", TrayIcon.MessageType.INFO);
                                toFront();
                            } catch (AWTException ex) {
                                System.err.println("Erro SystemTray: " + ex.getMessage());
                            }
                            setVisible(false);
                        }
                    }
                });
            } catch (IOException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
